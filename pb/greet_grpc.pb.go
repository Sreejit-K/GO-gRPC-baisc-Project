// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: proto/greet.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GreetingServiceClient is the client API for GreetingService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GreetingServiceClient interface {
	// unary
	GreetAPerson(ctx context.Context, in *NoParams, opts ...grpc.CallOption) (*GreetingResponse, error)
	// serverside streaming
	SayHelloServerStreaming(ctx context.Context, in *ReqList, opts ...grpc.CallOption) (GreetingService_SayHelloServerStreamingClient, error)
	// Client Side streaming
	SayHelloClientStreamin(ctx context.Context, opts ...grpc.CallOption) (GreetingService_SayHelloClientStreaminClient, error)
	// BI-Directional Sreaming
	SayHelloBiDirecrionalStreaming(ctx context.Context, opts ...grpc.CallOption) (GreetingService_SayHelloBiDirecrionalStreamingClient, error)
}

type greetingServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGreetingServiceClient(cc grpc.ClientConnInterface) GreetingServiceClient {
	return &greetingServiceClient{cc}
}

func (c *greetingServiceClient) GreetAPerson(ctx context.Context, in *NoParams, opts ...grpc.CallOption) (*GreetingResponse, error) {
	out := new(GreetingResponse)
	err := c.cc.Invoke(ctx, "/greet_service.greetingService/GreetAPerson", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *greetingServiceClient) SayHelloServerStreaming(ctx context.Context, in *ReqList, opts ...grpc.CallOption) (GreetingService_SayHelloServerStreamingClient, error) {
	stream, err := c.cc.NewStream(ctx, &GreetingService_ServiceDesc.Streams[0], "/greet_service.greetingService/SayHelloServerStreaming", opts...)
	if err != nil {
		return nil, err
	}
	x := &greetingServiceSayHelloServerStreamingClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type GreetingService_SayHelloServerStreamingClient interface {
	Recv() (*GreetingResponse, error)
	grpc.ClientStream
}

type greetingServiceSayHelloServerStreamingClient struct {
	grpc.ClientStream
}

func (x *greetingServiceSayHelloServerStreamingClient) Recv() (*GreetingResponse, error) {
	m := new(GreetingResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *greetingServiceClient) SayHelloClientStreamin(ctx context.Context, opts ...grpc.CallOption) (GreetingService_SayHelloClientStreaminClient, error) {
	stream, err := c.cc.NewStream(ctx, &GreetingService_ServiceDesc.Streams[1], "/greet_service.greetingService/SayHelloClientStreamin", opts...)
	if err != nil {
		return nil, err
	}
	x := &greetingServiceSayHelloClientStreaminClient{stream}
	return x, nil
}

type GreetingService_SayHelloClientStreaminClient interface {
	Send(*GreetingRequest) error
	CloseAndRecv() (*ResList, error)
	grpc.ClientStream
}

type greetingServiceSayHelloClientStreaminClient struct {
	grpc.ClientStream
}

func (x *greetingServiceSayHelloClientStreaminClient) Send(m *GreetingRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *greetingServiceSayHelloClientStreaminClient) CloseAndRecv() (*ResList, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(ResList)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *greetingServiceClient) SayHelloBiDirecrionalStreaming(ctx context.Context, opts ...grpc.CallOption) (GreetingService_SayHelloBiDirecrionalStreamingClient, error) {
	stream, err := c.cc.NewStream(ctx, &GreetingService_ServiceDesc.Streams[2], "/greet_service.greetingService/SayHelloBiDirecrionalStreaming", opts...)
	if err != nil {
		return nil, err
	}
	x := &greetingServiceSayHelloBiDirecrionalStreamingClient{stream}
	return x, nil
}

type GreetingService_SayHelloBiDirecrionalStreamingClient interface {
	Send(*GreetingRequest) error
	Recv() (*GreetingResponse, error)
	grpc.ClientStream
}

type greetingServiceSayHelloBiDirecrionalStreamingClient struct {
	grpc.ClientStream
}

func (x *greetingServiceSayHelloBiDirecrionalStreamingClient) Send(m *GreetingRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *greetingServiceSayHelloBiDirecrionalStreamingClient) Recv() (*GreetingResponse, error) {
	m := new(GreetingResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// GreetingServiceServer is the server API for GreetingService service.
// All implementations must embed UnimplementedGreetingServiceServer
// for forward compatibility
type GreetingServiceServer interface {
	// unary
	GreetAPerson(context.Context, *NoParams) (*GreetingResponse, error)
	// serverside streaming
	SayHelloServerStreaming(*ReqList, GreetingService_SayHelloServerStreamingServer) error
	// Client Side streaming
	SayHelloClientStreamin(GreetingService_SayHelloClientStreaminServer) error
	// BI-Directional Sreaming
	SayHelloBiDirecrionalStreaming(GreetingService_SayHelloBiDirecrionalStreamingServer) error
	mustEmbedUnimplementedGreetingServiceServer()
}

// UnimplementedGreetingServiceServer must be embedded to have forward compatible implementations.
type UnimplementedGreetingServiceServer struct {
}

func (UnimplementedGreetingServiceServer) GreetAPerson(context.Context, *NoParams) (*GreetingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GreetAPerson not implemented")
}
func (UnimplementedGreetingServiceServer) SayHelloServerStreaming(*ReqList, GreetingService_SayHelloServerStreamingServer) error {
	return status.Errorf(codes.Unimplemented, "method SayHelloServerStreaming not implemented")
}
func (UnimplementedGreetingServiceServer) SayHelloClientStreamin(GreetingService_SayHelloClientStreaminServer) error {
	return status.Errorf(codes.Unimplemented, "method SayHelloClientStreamin not implemented")
}
func (UnimplementedGreetingServiceServer) SayHelloBiDirecrionalStreaming(GreetingService_SayHelloBiDirecrionalStreamingServer) error {
	return status.Errorf(codes.Unimplemented, "method SayHelloBiDirecrionalStreaming not implemented")
}
func (UnimplementedGreetingServiceServer) mustEmbedUnimplementedGreetingServiceServer() {}

// UnsafeGreetingServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GreetingServiceServer will
// result in compilation errors.
type UnsafeGreetingServiceServer interface {
	mustEmbedUnimplementedGreetingServiceServer()
}

func RegisterGreetingServiceServer(s grpc.ServiceRegistrar, srv GreetingServiceServer) {
	s.RegisterService(&GreetingService_ServiceDesc, srv)
}

func _GreetingService_GreetAPerson_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NoParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GreetingServiceServer).GreetAPerson(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/greet_service.greetingService/GreetAPerson",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GreetingServiceServer).GreetAPerson(ctx, req.(*NoParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _GreetingService_SayHelloServerStreaming_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ReqList)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(GreetingServiceServer).SayHelloServerStreaming(m, &greetingServiceSayHelloServerStreamingServer{stream})
}

type GreetingService_SayHelloServerStreamingServer interface {
	Send(*GreetingResponse) error
	grpc.ServerStream
}

type greetingServiceSayHelloServerStreamingServer struct {
	grpc.ServerStream
}

func (x *greetingServiceSayHelloServerStreamingServer) Send(m *GreetingResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _GreetingService_SayHelloClientStreamin_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(GreetingServiceServer).SayHelloClientStreamin(&greetingServiceSayHelloClientStreaminServer{stream})
}

type GreetingService_SayHelloClientStreaminServer interface {
	SendAndClose(*ResList) error
	Recv() (*GreetingRequest, error)
	grpc.ServerStream
}

type greetingServiceSayHelloClientStreaminServer struct {
	grpc.ServerStream
}

func (x *greetingServiceSayHelloClientStreaminServer) SendAndClose(m *ResList) error {
	return x.ServerStream.SendMsg(m)
}

func (x *greetingServiceSayHelloClientStreaminServer) Recv() (*GreetingRequest, error) {
	m := new(GreetingRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _GreetingService_SayHelloBiDirecrionalStreaming_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(GreetingServiceServer).SayHelloBiDirecrionalStreaming(&greetingServiceSayHelloBiDirecrionalStreamingServer{stream})
}

type GreetingService_SayHelloBiDirecrionalStreamingServer interface {
	Send(*GreetingResponse) error
	Recv() (*GreetingRequest, error)
	grpc.ServerStream
}

type greetingServiceSayHelloBiDirecrionalStreamingServer struct {
	grpc.ServerStream
}

func (x *greetingServiceSayHelloBiDirecrionalStreamingServer) Send(m *GreetingResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *greetingServiceSayHelloBiDirecrionalStreamingServer) Recv() (*GreetingRequest, error) {
	m := new(GreetingRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// GreetingService_ServiceDesc is the grpc.ServiceDesc for GreetingService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GreetingService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "greet_service.greetingService",
	HandlerType: (*GreetingServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GreetAPerson",
			Handler:    _GreetingService_GreetAPerson_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SayHelloServerStreaming",
			Handler:       _GreetingService_SayHelloServerStreaming_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SayHelloClientStreamin",
			Handler:       _GreetingService_SayHelloClientStreamin_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "SayHelloBiDirecrionalStreaming",
			Handler:       _GreetingService_SayHelloBiDirecrionalStreaming_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "proto/greet.proto",
}
